#!/bin/bash
# Claude Memory Bank Uninstall Command
# Version: 2.2.0
# Safe uninstallation with options

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Installation paths
INSTALL_DIR="$HOME/.claude-memory-bank"
BIN_DIR="$HOME/.local/bin"
COMMANDS_DIR="$HOME/.claude/commands/memory-bank"

# Default options
DRY_RUN=false
FORCE=false
BACKUP=false
SYSTEM_ONLY=false
PROJECT_ONLY=false
ALL=true
KEEP_KNOWLEDGE=false

# Function to display usage
usage() {
    echo "Claude Memory Bank Uninstall Command"
    echo ""
    echo "Usage: $(basename $0) [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --dry-run       Show what would be removed without deleting"
    echo "  --force         Skip confirmation prompts"
    echo "  --backup        Create backup before removal"
    echo "  --system-only   Remove only system-level installation"
    echo "  --project-only  Remove only project-level files"
    echo "  --all           Complete removal (default)"
    echo "  --keep-knowledge Remove Memory Bank but preserve context files"
    echo "  -h, --help      Show this help message"
    echo ""
    echo "Examples:"
    echo "  $(basename $0) --dry-run              # Preview what will be removed"
    echo "  $(basename $0) --system-only          # Remove only global installation"
    echo "  $(basename $0) --project-only --force # Remove project files without prompts"
    echo "  $(basename $0) --keep-knowledge       # Remove infrastructure but keep context"
    echo ""
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --force)
            FORCE=true
            shift
            ;;
        --backup)
            BACKUP=true
            shift
            ;;
        --system-only)
            SYSTEM_ONLY=true
            ALL=false
            shift
            ;;
        --project-only)
            PROJECT_ONLY=true
            ALL=false
            shift
            ;;
        --all)
            ALL=true
            SYSTEM_ONLY=false
            PROJECT_ONLY=false
            shift
            ;;
        --keep-knowledge)
            KEEP_KNOWLEDGE=true
            PROJECT_ONLY=true
            ALL=false
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            usage
            exit 1
            ;;
    esac
done

# Function to confirm action
confirm() {
    if [ "$FORCE" = true ]; then
        return 0
    fi
    
    local prompt="$1"
    echo -e "${YELLOW}$prompt${NC}"
    read -p "Are you sure? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        return 1
    fi
    return 0
}

# Function to remove with dry-run support
remove_item() {
    local item="$1"
    local description="$2"
    
    if [ -e "$item" ]; then
        if [ "$DRY_RUN" = true ]; then
            echo -e "${BLUE}[DRY-RUN]${NC} Would remove: $description"
            echo "  Path: $item"
        else
            echo -e "${YELLOW}Removing:${NC} $description"
            rm -rf "$item"
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}✓${NC} Removed: $description"
            else
                echo -e "${RED}✗${NC} Failed to remove: $description"
            fi
        fi
    else
        if [ "$DRY_RUN" = true ]; then
            echo -e "${BLUE}[DRY-RUN]${NC} Not found: $description"
        fi
    fi
}

# Function to backup files
create_backup() {
    if [ "$BACKUP" = true ] && [ "$DRY_RUN" = false ]; then
        local timestamp=$(date +%Y%m%d_%H%M%S)
        local backup_dir="$HOME/claude-memory-bank-backup-$timestamp"
        
        echo -e "${YELLOW}Creating backup...${NC}"
        mkdir -p "$backup_dir"
        
        # Backup system files if they exist
        if [ -d "$INSTALL_DIR" ]; then
            cp -r "$INSTALL_DIR" "$backup_dir/system-installation" 2>/dev/null
        fi
        
        # Backup project files if in a project
        if [ -d ".memory-bank" ]; then
            cp -r .memory-bank "$backup_dir/project-memory-bank" 2>/dev/null
            [ -f "CLAUDE.md" ] && cp CLAUDE.md "$backup_dir/" 2>/dev/null
            [ -f "QUICK-REFERENCE.md" ] && cp QUICK-REFERENCE.md "$backup_dir/" 2>/dev/null
            [ -f "starter-prompt.md" ] && cp starter-prompt.md "$backup_dir/" 2>/dev/null
        fi
        
        echo -e "${GREEN}✓${NC} Backup created at: $backup_dir"
    fi
}

# Function to clean shell configuration
clean_shell_config() {
    local shell_rc=""
    
    # Detect shell configuration file
    if [ "$SHELL" = "/bin/bash" ] || [ "$SHELL" = "/usr/bin/bash" ]; then
        shell_rc="$HOME/.bashrc"
    elif [ "$SHELL" = "/bin/zsh" ] || [ "$SHELL" = "/usr/bin/zsh" ]; then
        shell_rc="$HOME/.zshrc"
    fi
    
    if [ -n "$shell_rc" ] && [ -f "$shell_rc" ]; then
        if [ "$DRY_RUN" = true ]; then
            echo -e "${BLUE}[DRY-RUN]${NC} Would clean shell configuration: $shell_rc"
            grep -n "Claude Memory Bank" "$shell_rc" 2>/dev/null | while read -r line; do
                echo "  Line to remove: $line"
            done
        else
            # Create backup of shell config
            cp "$shell_rc" "$shell_rc.backup-$(date +%Y%m%d_%H%M%S)"
            
            # Remove Claude Memory Bank sections
            sed -i '/# Claude Memory Bank/,/^$/d' "$shell_rc"
            sed -i '/# Claude Memory Bank aliases/,/^$/d' "$shell_rc"
            
            echo -e "${GREEN}✓${NC} Cleaned shell configuration: $shell_rc"
            echo "  Backup saved with timestamp"
        fi
    fi
}

# Function to uninstall system-level components
uninstall_system() {
    echo -e "\n${YELLOW}=== System-Level Uninstallation ===${NC}"
    
    # Global installation directory
    remove_item "$INSTALL_DIR" "Global installation directory"
    
    # Global commands
    remove_item "$BIN_DIR/claude-memory-setup" "claude-memory-setup command"
    remove_item "$BIN_DIR/claude-memory-update" "claude-memory-update command"
    remove_item "$BIN_DIR/claude-memory-status" "claude-memory-status command"
    remove_item "$BIN_DIR/claude-memory-uninstall" "claude-memory-uninstall command"
    
    # Slash commands
    remove_item "$COMMANDS_DIR" "Claude Code slash commands"
    
    # Shell configuration
    clean_shell_config
}

# Function to uninstall project-level components
uninstall_project() {
    echo -e "\n${YELLOW}=== Project-Level Uninstallation ===${NC}"
    
    if [ ! -d ".memory-bank" ]; then
        echo -e "${YELLOW}No Memory Bank found in current directory${NC}"
        return
    fi
    
    if [ "$KEEP_KNOWLEDGE" = true ]; then
        echo -e "${BLUE}Keeping knowledge files (context/, active/, decisions/)${NC}"
        
        # Remove only infrastructure
        remove_item ".memory-bank/custom_modes" "Custom mode instructions"
        remove_item ".memory-bank/scripts" "Automation scripts"
        remove_item ".memory-bank/templates" "Template files"
        remove_item ".memory-bank/.env" "Environment file"
        remove_item ".memory-bank/qa" "QA directory"
        remove_item ".memory-bank/technical" "Technical patterns"
        
        # Remove project root files
        remove_item "CLAUDE.md" "Claude Code configuration"
        remove_item "QUICK-REFERENCE.md" "Quick reference guide"
        remove_item "starter-prompt.md" "Starter prompt"
        remove_item "setup-memory-bank.sh" "Local setup script"
        remove_item ".memory-bank-ignore" "Hierarchy control file"
        
        echo -e "${GREEN}✓${NC} Knowledge preserved in .memory-bank/{context,active,decisions}"
    else
        # Remove everything
        remove_item ".memory-bank" "Memory Bank directory"
        remove_item "CLAUDE.md" "Claude Code configuration"
        remove_item "QUICK-REFERENCE.md" "Quick reference guide"
        remove_item "starter-prompt.md" "Starter prompt"
        remove_item "setup-memory-bank.sh" "Local setup script"
        remove_item ".memory-bank-ignore" "Hierarchy control file"
    fi
    
    # Check for OLD backups from migrations (not the backup we just created)
    for backup in .memory-bank.backup.* memory-bank.backup.*; do
        if [ -d "$backup" ]; then
            remove_item "$backup" "Old backup directory: $backup"
        fi
    done
}

# Function to find all projects with Memory Bank
find_all_projects() {
    echo -e "\n${YELLOW}Searching for all Memory Bank projects...${NC}"
    
    local search_paths=("$HOME/projects" "$HOME/dev" "$HOME/code" "$HOME/src" "$HOME/work")
    local found_projects=()
    
    for path in "${search_paths[@]}"; do
        if [ -d "$path" ]; then
            while IFS= read -r project; do
                found_projects+=("$(dirname "$project")")
            done < <(find "$path" -name ".memory-bank" -type d 2>/dev/null | grep -v "backup")
        fi
    done
    
    if [ ${#found_projects[@]} -eq 0 ]; then
        echo "No Memory Bank projects found in common locations"
    else
        echo -e "${GREEN}Found ${#found_projects[@]} project(s) with Memory Bank:${NC}"
        printf '%s\n' "${found_projects[@]}" | sort -u | nl
    fi
}

# Main execution
main() {
    echo -e "${BLUE}Claude Memory Bank Uninstall Tool v2.2.0${NC}"
    echo "========================================="
    
    if [ "$DRY_RUN" = true ]; then
        echo -e "${YELLOW}DRY-RUN MODE: No files will be deleted${NC}"
    fi
    
    # Determine what to uninstall
    if [ "$ALL" = true ]; then
        echo -e "\n${YELLOW}Mode: Complete uninstallation (system + project)${NC}"
        if ! confirm "This will remove ALL Memory Bank components. Continue?"; then
            echo "Uninstallation cancelled."
            exit 0
        fi
        create_backup
        uninstall_system
        uninstall_project
    elif [ "$SYSTEM_ONLY" = true ]; then
        echo -e "\n${YELLOW}Mode: System-only uninstallation${NC}"
        if ! confirm "This will remove system-level Memory Bank installation. Continue?"; then
            echo "Uninstallation cancelled."
            exit 0
        fi
        create_backup
        uninstall_system
    elif [ "$PROJECT_ONLY" = true ]; then
        if [ "$KEEP_KNOWLEDGE" = true ]; then
            echo -e "\n${YELLOW}Mode: Remove infrastructure, keep knowledge${NC}"
            if ! confirm "This will remove Memory Bank infrastructure but preserve context files. Continue?"; then
                echo "Uninstallation cancelled."
                exit 0
            fi
        else
            echo -e "\n${YELLOW}Mode: Project-only uninstallation${NC}"
            if ! confirm "This will remove Memory Bank from the current project. Continue?"; then
                echo "Uninstallation cancelled."
                exit 0
            fi
        fi
        create_backup
        uninstall_project
    fi
    
    # Show summary
    echo -e "\n${BLUE}=== Uninstallation Summary ===${NC}"
    if [ "$DRY_RUN" = true ]; then
        echo "Dry-run completed. No files were removed."
        echo "Run without --dry-run to perform actual uninstallation."
    else
        echo -e "${GREEN}✓${NC} Uninstallation completed successfully"
        
        # Check for any remaining files
        local remaining=false
        [ -d "$INSTALL_DIR" ] && remaining=true && echo -e "${YELLOW}Note:${NC} Installation directory still exists"
        [ -d "$COMMANDS_DIR" ] && remaining=true && echo -e "${YELLOW}Note:${NC} Slash commands directory still exists"
        [ -d ".memory-bank" ] && remaining=true && echo -e "${YELLOW}Note:${NC} Project .memory-bank still exists"
        
        if [ "$remaining" = false ]; then
            echo "All selected components have been removed."
        fi
        
        # Suggest finding other projects
        if [ "$SYSTEM_ONLY" = false ]; then
            echo -e "\n${YELLOW}Tip:${NC} To find other projects with Memory Bank, run:"
            echo "  $(basename $0) --dry-run && find ~ -name '.memory-bank' -type d 2>/dev/null"
        fi
    fi
}

# Run main function
main